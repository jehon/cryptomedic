<?php

// TODO: on the frontend, some day, we will need a blocking syncing screen

namespace App\Http\Middleware;

define("n", 200);

require_once __DIR__ . '/../../../../php/references.php';

use Closure;
use Illuminate\Foundation\Http\Middleware\VerifyCsrfToken as BaseVerifier;
use \References;
use \DB;
use \App\SyncComputer;

class OfflineData {

	/**
	 * Handle an incoming request.
	 *
	 * @param  \Illuminate\Http\Request  $request
	 * @param  \Closure  $next
	 * @return mixed
	 */
	public function handle($request, Closure $next)
	{
		$response = $next($request);
		if ($response->getStatusCode() != 200) {
			return $response;
		}
		
		$old_cp = $request->header("X-OFFLINE-CP", $request->input("_x_offline_cp", false));
		if ($old_cp !== false) {
			$data = $response->getData();
			if (!is_array($data) && !is_object($data)) {
				return $response;
			}
			$offline = [];
			
			// X-OFFLINE-CP: timestamp|patient_id (generated by $last in _offline->checkpoint)
			if ($old_cp == "") {
				$cp = array("", -1);	
				$offline['reset'] = 1;
			} else {
				$cp = explode("|", $old_cp);
				if (count($cp) != 2) {
					$cp = array("", -1);
					$offline['reset'] = 1;
				} else {
					$offline['reset'] = 0;
				}
			}

// TODO: reset
// 			if (strpos($cp[1], "-") === false) {
// 				// Old system, let's restart the sync!
// 				$offline['reset'] = 1;
// 			}
			
			$sqlu = "";
			$params = array();

			foreach((References::$model2db + [ "Deleted" => "deleteds" ]) as $m => $t) {
				if ($sqlu) {
					$sqlu .= " UNION \n";
				}
				$patient_id = ($t == "patients" ? "id" : "patient_id");
				$sqlu .= "("
						. "SELECT greatest(created_at, updated_at) as ts, '$t' as t, $patient_id as patient_id"
						. " FROM $t "
						. " WHERE (greatest(created_at, updated_at) > :ts0_{$m}) "
						. "   OR ((greatest(created_at, updated_at) = :ts1_{$m}) AND ($patient_id > :id1_${m}))"
						. " ORDER BY greatest(created_at, updated_at), $patient_id)";
				$params["ts0_{$m}"]    = $params["ts1_${m}"]    = $cp[0];
				$params["id1_{$m}"]    = $cp[1];
			}
			$sql = "SELECT MAX(ts) as ts, patient_id, t \nFROM (\n$sqlu\n) as p \n ";
			$sql .= "GROUP BY patient_id ";
			$res = DB::select("SELECT count(*) as c FROM ($sql) as p", $params);
			$offline["remaining"] = $res[0]->c;
			
			$sql .= "ORDER BY MAX(ts), patient_id ";
			$sql .= "LIMIT " . constant("n");

			$res = DB::select($sql, $params);
			
			$last = "";
			$offline['data'] = [];
			foreach($res as $i => $r) {
				if ($r->t == 'deleteds') {
					$offline['data'][$i] = [ 'id' => $r->patient_id, '_deleted' => true ];
				} else {
					$offline['data'][$i]['record'] = getFolder($r->patient_id);
				}
				$offline['data'][$i]['_dueTo'] = $r->t . "# pid" . $r->patient_id;
				$last = $offline['data'][$i]['checkpoint'] = $r->ts . "|" . $r->patient_id;
			}
			$offline["checkpoint"] = ($last ? $last : $old_cp);
			$offline["isfinal"] = (count($res) < constant("n"));
			if (is_array($data)) {
				$data['_offline'] = $offline;
			} else if (is_object($data)) {
				$data->_offline = $offline;
			} else {
				// Could not add data here...
				return $response;
			}

			// Store the information for helping understanding what is happening out there...
			$computerId = session()->get('computerId');
			$computer = SyncComputer::firstOrCreate([ "computer_id" => $computerId ]);
			$computer->last_sync = $old_cp;
			$computer->last_sync_final = $offline['isfinal'];
			$computer->save();

			$response->setData($data);
			return $response;
		}
		return $response;
	}
}
