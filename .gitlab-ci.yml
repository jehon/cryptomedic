include:
  - component: $CI_SERVER_FQDN/$CI_PROJECT_NAMESPACE/components/default@main
  - component: $CI_SERVER_FQDN/$CI_PROJECT_NAMESPACE/packages/lint@production
  - component: $CI_SERVER_FQDN/$CI_PROJECT_NAMESPACE/components/docker@production
    inputs:
      flavor: /builder
      context: services/builder
      dockerFile: services/builder/Dockerfile
      publish: false
  - component: $CI_SERVER_FQDN/$CI_PROJECT_NAMESPACE/components/docker@production
    inputs:
      flavor: /database
      context: services/database
      dockerFile: services/database/Dockerfile
      publish: false
  - component: $CI_SERVER_FQDN/$CI_PROJECT_NAMESPACE/components/docker@production
    inputs:
      context: services/web
      dockerFile: services/web/Dockerfile

default:
  timeout: 15m

############################################################
#
# build
#

# build:
#   stage: build
#   image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/packages/dev:latest
#   services:
#     - name: docker
#   script:
#     - env
#     - make dump
#     - make build
#   artifacts:
#     paths:
#       - .ovhconfig
#       - www

############################################################
#
# Test
#

.with-services:
  stage: test
  image: $CI_REGISTRY_IMAGE/builder:$CI_COMMIT_SHA
  services:
    - alias: database
      name: $CI_REGISTRY_IMAGE/database:$CI_COMMIT_SHA
    - alias: web
      name: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  variables:
    CRYPTOMEDIC_DEV_HTTP_HOST: web
    CRYPTOMEDIC_DEV_HTTP_PORT: 80
    CRYPTOMEDIC_DEV_MYSQL_HOST: database
  before_script:
    - bin/cr-system-ready
    - cr-refresh-structure "http://${CRYPTOMEDIC_DEV_HTTP_HOST}:${CRYPTOMEDIC_DEPLOY_WEB_PORT}/" "secret"

# test-setup:
#   extends: .with-services
#   script:
#     - bin/cr-mysql cryptomedic -e "select * from settings;"
#     - curl -fsS http://web/

test-frontend:
  stage: test
  image: $CI_REGISTRY_IMAGE/builder:$CI_COMMIT_SHA
  script:
    - make frontend-test

tests-backend:
  stage: test
  extends: .with-services
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  script:
    # In the current folder, we have the git checkout, but
    # without the vendor install
    - cd /app/www/api
    - vendor/bin/phpunit

# tests-e2e-desktop:
#   stage: test
#   image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/packages/dev:latest
#   services:
#     - name: docker:dind
#   parallel:
#     matrix:
#       - flavor:
#         - desktop
#         - playwright
#   script:
#     - ./setup.sh
#     - make github
#     - make dc-build
#     - make start
#     - make dependencies
#     - make integration-test-desktop-run
#     - make integration-test-desktop-styles
#   artifacts:
#     when: always
#     paths:
#       - tmp/integration/desktop

# tests-e2e-playwright-strict:
#   stage: test
#   image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/packages/dev:latest
#   services:
#     - name: docker:dind
#   script:
#     - ./setup.sh
#     - make github
#     - make dc-build
#     - make start
#     - make dependencies
#     - make integration-test-playwright-strict
#   artifacts:
#     when: always
#     paths:
#       - tmp/integration/playwright

# test-e2e-playwright:
#   stage: test
#   image: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/packages/dev:latest
#   services:
#     - name: docker:dind
#   script:
#     - ./setup.sh
#     - make github
#     - make dc-build
#     - make start
#     - make dependencies
#     - make integration-test-playwright
#     - git status
#   artifacts:
#     when: always
#     paths:
#       - tests/e2e/**/*.png

deploy:
  stage: release
  image: alpine
#   needs:
#     - tests-unit
#     - tests-unit-with-backend
#     - test-e2e-playwright
# #   environment:
# #     name: production
# #   rules:
# #     - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
# #       when: never
# #     - when: on_success
  script:
    - echo 'Not implemented yet'
    - /not-implemented-yet
# #     - ./setup.sh
# #     - make github
# #     - make build
# #     - make deploy
# #   variables:
# #     CRYPTOMEDIC_DEPLOY_WEB_HOST: $CRYPTOMEDIC_DEPLOY_WEB_HOST
# #     CRYPTOMEDIC_DEPLOY_WEB_PORT: $CRYPTOMEDIC_DEPLOY_WEB_PORT
# #     CRYPTOMEDIC_DEPLOY_WEB_TOKEN: $CRYPTOMEDIC_DEPLOY_WEB_TOKEN
# #     CRYPTOMEDIC_DEPLOY_FILES_HOST: $CRYPTOMEDIC_DEPLOY_FILES_HOST
# #     CRYPTOMEDIC_DEPLOY_FILES_USER: $CRYPTOMEDIC_DEPLOY_FILES_USER
# #     CRYPTOMEDIC_DEPLOY_FILES_PASSWORD: $CRYPTOMEDIC_DEPLOY_FILES_PASSWORD
# #   artifacts:
# #     when: always
# #     paths:
# #       - tmp/deploy.log
